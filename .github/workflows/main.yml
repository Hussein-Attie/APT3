name: Build project and Send to the Cloud

on:
    push

jobs:

  Changelog:

    name: Generate Changelog
    runs-on: ubuntu-latest


    outputs:
    
      output1: ${{ steps.generate_changelog.outputs.tag }}
      
      
    steps:
            
    #Checkout   
      - name: Checkout
        uses: actions/checkout@v3
        with:
         fetch-depth: 0
            
    #Changelog
      - name: Conventional changelog action
        id: generate_changelog
        uses: TriPSs/conventional-changelog-action@v3.7.1
        with:
          github-token: ${{ secrets.github_token }}
          skip-on-empty: 'true'
          
    #Github Release
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        if: ${{ steps.generate_changelog.outputs.skipped == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN  }}
        with:
          tag_name: ${{ steps.generate_changelog.outputs.tag }}
          release_name: ${{ steps.generate_changelog.outputs.tag }}
          body: ${{ steps.generate_changelog.outputs.clean_changelog }}
     
          
  Build:

    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    needs: Changelog

    outputs:
      output1: ${{ steps.build.outcome }}

    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          - StandaloneWindows # Build a Windows standalone.
     
    steps:
    
      
    #Checkout
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true
 
          
    # Cache
      - name: Cache
        uses: actions/cache@v2
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-
          
    # Test
      - name: Run tests
        uses: game-ci/unity-test-runner@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-
            
    # Test Results   
      - name: Output test results artifacts
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Test results
          path: artifacts
          
    
    #Build
      - name: Build project for ${{ matrix.targetPlatform }}
        uses: game-ci/unity-builder@v2 
        id: build 
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }} #UNITY_LICENSE
        with:
          versioning: Custom
          version: ${{ needs.Changelog.outputs.output1 }}
          targetPlatform: ${{ matrix.targetPlatform }}
          buildName: TestGame-${{ matrix.targetPlatform }}-v${{ steps.build.outputs.buildVersion }}
     
    #Build Output
      - name: Output build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Build-${{ matrix.targetPlatform }}-${{ steps.build.outputs.buildVersion }}
          path: artifacts
        
  Store:

    name: Store Build
    runs-on: ubuntu-latest
    needs: Build
    
    steps: 
    
    #Checkout   
      - name: Checkout
        uses: actions/checkout@v3
        
    #Cloud Storage
      - name: Upload build to Google Drive
        uses: Jodebu/upload-to-drive@master
        with:
           target:  artifacts
           name: Build-${{ matrix.targetPlatform }}v-${{ steps.build.outputs.buildVersion }}
           credentials: ${{ secrets.CREDENTIALS }}
           folder: ${{ secrets.DRIVE_FOLDER_ID }}

 
   
            
  Clean-up:
  
    name: Clean-up if Workflow Fails
    runs-on: ubuntu-latest
    needs: [Build, Changelog]

    if: always() && (needs.Build.outputs.output1 != 'success' )  
    steps:
    
    #Checkout    
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0 
        
    
        
    #Rollback

      - name: Rollback Release
        uses: ame-yu/action-delete-latest-release@v2
        if: ${{ needs.Changelog.outputs.output1 != '' }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}


