name: Build project and Send to the Cloud

on:
    push

jobs:
  changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.changelog.outputs.tag }}
      
    steps:
    
      - uses: actions/checkout@v3
        with:
         fetch-depth: 0

      - name: conventional Changelog Action
        id: changelog
        uses: TriPSs/conventional-changelog-action@v3.7.1
        with:
          github-token: ${{ secrets.github_token }}
          

      - name: create_release
        id: create_release
        uses: actions/create-release@v1
        if: ${{ steps.changelog.outputs.skipped == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN  }}
        with:
          tag_name: ${{ steps.changelog.outputs.tag }}
          release_name: ${{ steps.changelog.outputs.tag }}
          body: ${{ steps.changelog.outputs.clean_changelog }}
     
          
  Build:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    needs: changelog
    outputs:
      output1: ${{ steps.myBuildStep.outcome }}
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          - StandaloneWindows # Build a Windows standalone.
     
    steps:
    
      
    #Checkout
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true
 
          
     # Cache
      - uses: actions/cache@v2
        with:
          path: Library

          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-
          
      # Test
      #- name: Run tests
       # uses: game-ci/unity-test-runner@v2
        #env:
         # UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        #with:
         # githubToken: ${{ secrets.GITHUB_TOKEN }}
         # key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          #restore-keys: |
           # Library-
            
      # Upload Test Results       
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Test results
          path: artifacts
          
    
      #Build
      - uses: game-ci/unity-builder@v2 
        id: myBuildStep
        env:
          UNITY_LICENSE: ${{ secrets.ICENSE }} #should be  secrets.UNITY_LICENSE 
        with:
          versioning: Custom
          version: ${{ needs.changelog.outputs.output1 }}
          targetPlatform: ${{ matrix.targetPlatform }}
          buildName: TestGame-${{ matrix.targetPlatform }}-v${{ steps.myBuildStep.outputs.buildVersion }}
     
       #Output 
      - uses: actions/upload-artifact@v2
        with:
          name: Build-${{ matrix.targetPlatform }}-${{ steps.myBuildStep.outputs.buildVersion }}
          path: build/${{ matrix.targetPlatform }}
        
     
         #upload to google drive
      - name: Upload build to Google Drive
        uses: Jodebu/upload-to-drive@master
        with:
           target:  build/${{ matrix.targetPlatform }}
           name: Build-${{ matrix.targetPlatform }}v-${{ steps.myBuildStep.outputs.buildVersion }}
           credentials: ${{ secrets.CREDENTIALS }}
           folder: ${{ secrets.DRIVE_FOLDER_ID }}
 
      - name: get result
        run: echo ${{ steps.myBuildStep.outcome }}
   
            
  clean-up:
  
    name: Clean Up if Fails
    runs-on: ubuntu-latest
    needs: [Build, changelog]
    if: always() && (needs.Build.outputs.output1 != 'success' )  #steps.hello.outputs.status
    steps:
      - name: get tag
        run: echo ${{ needs.changelog.outputs.output1 }}
     #clean up if any step fails 
      - name: Rollback Release
        uses: author/action-rollback@stable
        with:
            # Using a known release ID
            #id: ${{ steps.create_release.id }}
            tag: ${{ needs.changelog.outputs.output1 }}
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            
